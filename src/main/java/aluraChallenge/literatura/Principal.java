package aluraChallenge.literatura;

import java.util.Comparator;
import java.util.DoubleSummaryStatistics;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Scanner;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import aluraChallenge.literatura.dto.DatosLibro;
import aluraChallenge.literatura.dto.ResultadoBusqueda;
import aluraChallenge.literatura.models.Autor;
import aluraChallenge.literatura.models.Libro;
import aluraChallenge.literatura.repository.AutorRepository;
import aluraChallenge.literatura.repository.LibroRepository;
import aluraChallenge.literatura.service.ConsumoApi;

@Component
public class Principal {
    
    private final Scanner teclado = new Scanner(System.in);
    
    @Autowired
    private ConsumoApi consumoApi;
    
    @Autowired
    private LibroRepository libroRepository;
    
    @Autowired
    private AutorRepository autorRepository;
    
    public void muestraElMenu() {
        var opcion = -1;
        while (opcion != 0) {
            var menu = """
                    
                    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
                    ‚ïë            üìö LITERALURA üìö              ‚ïë
                    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
                    ‚ïë Elija la opci√≥n a trav√©s de su n√∫mero:   ‚ïë
                    ‚ïë                                          ‚ïë
                    ‚ïë 1 - Buscar libro por t√≠tulo             ‚ïë
                    ‚ïë 2 - Listar libros registrados           ‚ïë
                    ‚ïë 3 - Listar autores registrados          ‚ïë
                    ‚ïë 4 - Listar autores vivos en un a√±o      ‚ïë
                    ‚ïë 5 - Listar libros por idioma            ‚ïë
                    ‚ïë 6 - Top 10 libros m√°s descargados       ‚ïë
                    ‚ïë 7 - Buscar autor por nombre             ‚ïë
                    ‚ïë 8 - Estad√≠sticas de la biblioteca       ‚ïë
                    ‚ïë 9 - Buscar libros por tema              ‚ïë
                    ‚ïë 10- Explorar libros populares           ‚ïë
                    ‚ïë 0 - Salir                               ‚ïë
                    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
                    """;
            System.out.println(menu);
            System.out.print("üëâ Opci√≥n: ");
            
            try {
                opcion = teclado.nextInt();
                teclado.nextLine(); // Limpiar buffer
                
                switch (opcion) {
                    case 1 -> buscarLibroPorTitulo();
                    case 2 -> listarLibrosRegistrados();
                    case 3 -> listarAutoresRegistrados();
                    case 4 -> listarAutoresVivosEnA√±o();
                    case 5 -> listarLibrosPorIdioma();
                    case 6 -> top10LibrosMasDescargados();
                    case 7 -> buscarAutorPorNombre();
                    case 8 -> mostrarEstadisticas();
                    case 9 -> buscarLibrosPorTema();
                    case 10 -> explorarLibrosPopulares();
                    case 0 -> salir();
                    default -> System.out.println("‚ùå Opci√≥n inv√°lida. Por favor, elija un n√∫mero del 0 al 10.");
                }
            } catch (InputMismatchException e) {
                System.out.println("‚ùå Por favor, ingrese un n√∫mero v√°lido.");
                teclado.nextLine(); // Limpiar buffer
            }
        }
    }
    
    private void salir() {
        System.out.println("\nüëã ¬°Gracias por usar LiterAlura! ¬°Hasta pronto!");
        System.exit(0);
    }

    private void buscarLibroPorTitulo() {
        System.out.print("\nüìñ Escribe el nombre del libro que deseas buscar: ");
        var tituloLibro = teclado.nextLine();
        
        if (tituloLibro.trim().isEmpty()) {
            System.out.println("‚ùå El t√≠tulo no puede estar vac√≠o.");
            return;
        }
        
        try {
            System.out.println("üîç Buscando en la biblioteca de Gutendx...");
            
            var json = consumoApi.buscarLibrosPorTitulo(tituloLibro);
            var datosBusqueda = consumoApi.convertirDatos(json, ResultadoBusqueda.class);
            
            if (datosBusqueda.libros().isEmpty()) {
                System.out.println("üòî Lo siento, no se encontr√≥ el libro: " + tituloLibro);
                return;
            }
            
            var datosLibro = datosBusqueda.libros().get(0);
            
            // Verificar si el libro ya existe
            Optional<Libro> libroExistente = libroRepository.findByTituloContainsIgnoreCase(datosLibro.titulo());
            if (libroExistente.isPresent()) {
                System.out.println("üìö ¬°Este libro ya est√° en tu biblioteca!");
                System.out.println(libroExistente.get());
                return;
            }
            
            // Crear/buscar autor
            Autor autor = null;
            if (!datosLibro.autores().isEmpty()) {
                var datosAutor = datosLibro.autores().get(0);
                Optional<Autor> autorExistente = autorRepository.findByNombreContainsIgnoreCase(datosAutor.nombre());
                
                if (autorExistente.isPresent()) {
                    autor = autorExistente.get();
                } else {
                    autor = new Autor(datosAutor.nombre(), 
                            datosAutor.fechaNacimiento(), 
                            datosAutor.fechaMuerte());
                    autor = autorRepository.save(autor);
                    System.out.println("‚ú® Nuevo autor agregado: " + autor.getNombre());
                }
            }
            
            // Crear libro
            String idioma = datosLibro.idiomas().isEmpty() ? "desconocido" : datosLibro.idiomas().get(0);
            Integer descargas = datosLibro.numeroDescargas() != null ? datosLibro.numeroDescargas() : 0;
            
            Libro libro = new Libro(datosLibro.titulo(), autor, idioma, descargas);
            libroRepository.save(libro);
            
            System.out.println("\nüéâ ¬°Libro agregado exitosamente a tu biblioteca!");
            System.out.println(libro);
            
        } catch (Exception e) {
            System.out.println("‚ùå Error al buscar el libro: " + e.getMessage());
        }
    }
    
    private void listarLibrosRegistrados() {
        List<Libro> libros = libroRepository.findAll();
        
        if (libros.isEmpty()) {
            System.out.println("\nüìö Tu biblioteca est√° vac√≠a. ¬°Busca algunos libros!");
            return;
        }
        
        System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë           üìö TU BIBLIOTECA üìö          ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.printf("Total de libros: %d%n%n", libros.size());
        
        libros.forEach(libro -> {
            System.out.println(libro);
            System.out.println("‚îÄ".repeat(50));
        });
    }
    
    private void listarAutoresRegistrados() {
        List<Autor> autores = autorRepository.findAll();
        
        if (autores.isEmpty()) {
            System.out.println("\nüë§ No hay autores registrados en tu biblioteca.");
            return;
        }
        
        System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë          üë• AUTORES REGISTRADOS üë•     ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.printf("Total de autores: %d%n%n", autores.size());
        
        autores.forEach(autor -> {
            System.out.println(autor);
            if (!autor.getLibros().isEmpty()) {
                System.out.println("üìñ Libros en tu biblioteca:");
                autor.getLibros().forEach(libro -> 
                    System.out.println("   ‚Ä¢ " + libro.getTitulo()));
            }
            System.out.println("‚îÄ".repeat(50));
        });
    }
    
    private void listarAutoresVivosEnA√±o() {
        System.out.print("\nüìÖ Ingrese el a√±o para buscar autores vivos: ");
        
        try {
            var a√±o = teclado.nextInt();
            teclado.nextLine();
            
            if (a√±o < 0 || a√±o > 2024) {
                System.out.println("‚ùå Por favor ingrese un a√±o v√°lido.");
                return;
            }
            
            List<Autor> autoresVivos = autorRepository.findAutoresVivosEnA√±o(a√±o);
            
            if (autoresVivos.isEmpty()) {
                System.out.printf("üòî No se encontraron autores vivos en el a√±o %d en tu biblioteca.%n", a√±o);
                return;
            }
            
            System.out.printf("%nüåü Autores vivos en %d:%n", a√±o);
            System.out.println("‚ïê".repeat(40));
            
            autoresVivos.forEach(autor -> {
                System.out.println(autor);
                System.out.println("‚îÄ".repeat(30));
            });
            
        } catch (InputMismatchException e) {
            System.out.println("‚ùå Por favor, ingrese un a√±o v√°lido (n√∫mero entero).");
            teclado.nextLine();
        }
    }
    
    private void listarLibrosPorIdioma() {
        var menuIdioma = """
                
                üåç Seleccione el idioma:
                ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                ‚îÇ es - Espa√±ol            ‚îÇ
                ‚îÇ en - Ingl√©s             ‚îÇ
                ‚îÇ fr - Franc√©s            ‚îÇ
                ‚îÇ pt - Portugu√©s          ‚îÇ
                ‚îÇ de - Alem√°n             ‚îÇ
                ‚îÇ it - Italiano           ‚îÇ
                ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                üëâ Ingrese el c√≥digo del idioma: """;
        
        System.out.print(menuIdioma);
        var idioma = teclado.nextLine().trim().toLowerCase();
        
        if (idioma.isEmpty()) {
            System.out.println("‚ùå C√≥digo de idioma no puede estar vac√≠o.");
            return;
        }
        
        List<Libro> librosPorIdioma = libroRepository.findByIdioma(idioma);
        
        if (librosPorIdioma.isEmpty()) {
            System.out.printf("üòî No se encontraron libros en idioma '%s' en tu biblioteca.%n", idioma.toUpperCase());
            return;
        }
        
        String nombreIdioma = obtenerNombreIdioma(idioma);
        System.out.printf("%nüìö Libros en %s (%d encontrados):%n", nombreIdioma, librosPorIdioma.size());
        System.out.println("‚ïê".repeat(50));
        
        librosPorIdioma.forEach(libro -> {
            System.out.println(libro);
            System.out.println("‚îÄ".repeat(40));
        });
    }
    
    private String obtenerNombreIdioma(String codigo) {
        return switch (codigo.toLowerCase()) {
            case "es" -> "Espa√±ol";
            case "en" -> "Ingl√©s";
            case "fr" -> "Franc√©s";
            case "pt" -> "Portugu√©s";
            case "de" -> "Alem√°n";
            case "it" -> "Italiano";
            default -> codigo.toUpperCase();
        };
    }
    
    private void top10LibrosMasDescargados() {
        List<Libro> libros = libroRepository.findAllOrderByNumeroDescargasDesc();
        
        if (libros.isEmpty()) {
            System.out.println("\nüìö No hay libros registrados para mostrar estad√≠sticas.");
            return;
        }
        
        System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë       üèÜ TOP 10 M√ÅS DESCARGADOS üèÜ      ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        
        libros.stream()
                .limit(10)
                .forEach(libro -> {
                    System.out.printf("üìñ %s%n", libro.getTitulo());
                    System.out.printf("   üë§ %s%n", libro.getAutor().getNombre());
                    System.out.printf("   üì• %,d descargas%n", libro.getNumeroDescargas());
                    System.out.println("   " + "‚îÄ".repeat(40));
                });
    }
    
    private void buscarAutorPorNombre() {
        System.out.print("\nüë§ Ingrese el nombre del autor a buscar: ");
        var nombreAutor = teclado.nextLine().trim();
        
        if (nombreAutor.isEmpty()) {
            System.out.println("‚ùå El nombre del autor no puede estar vac√≠o.");
            return;
        }
        
        List<Autor> autores = autorRepository.findByNombreContaining(nombreAutor);
        
        if (autores.isEmpty()) {
            System.out.printf("üòî No se encontr√≥ ning√∫n autor con el nombre '%s'.%n", nombreAutor);
            return;
        }
        
        System.out.printf("%nüîç Autores encontrados (%d):%n", autores.size());
        System.out.println("‚ïê".repeat(40));
        
        autores.forEach(autor -> {
            System.out.println(autor);
            if (!autor.getLibros().isEmpty()) {
                System.out.println("üìö Sus libros en tu biblioteca:");
                autor.getLibros().forEach(libro -> 
                    System.out.printf("   ‚Ä¢ %s (%,d descargas)%n", 
                        libro.getTitulo(), libro.getNumeroDescargas()));
            }
            System.out.println("‚îÄ".repeat(40));
        });
    }
    
    private void mostrarEstadisticas() {
        List<Libro> libros = libroRepository.findAll();
        List<Autor> autores = autorRepository.findAll();
        
        if (libros.isEmpty()) {
            System.out.println("\nüìä No hay datos suficientes para mostrar estad√≠sticas.");
            return;
        }
        
        // Calcular estad√≠sticas
        DoubleSummaryStatistics statsDescargas = libros.stream()
                .mapToDouble(Libro::getNumeroDescargas)
                .summaryStatistics();
        
        Map<String, Long> librosPorIdioma = libros.stream()
                .collect(Collectors.groupingBy(Libro::getIdioma, Collectors.counting()));
        
        System.out.println("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë         üìä ESTAD√çSTICAS BIBLIOTECA üìä   ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        
        System.out.printf("üìö Total de libros: %d%n", libros.size());
        System.out.printf("üë• Total de autores: %d%n", autores.size());
        System.out.println();
        
        System.out.println("üì• Estad√≠sticas de descargas:");
        System.out.printf("   ‚Ä¢ Promedio: %,.0f descargas%n", statsDescargas.getAverage());
        System.out.printf("   ‚Ä¢ M√°ximo: %,.0f descargas%n", statsDescargas.getMax());
        System.out.printf("   ‚Ä¢ M√≠nimo: %,.0f descargas%n", statsDescargas.getMin());
        System.out.printf("   ‚Ä¢ Total: %,.0f descargas%n", statsDescargas.getSum());
        System.out.println();
        
        System.out.println("üåç Distribuci√≥n por idiomas:");
        librosPorIdioma.entrySet().stream()
                .sorted(Map.Entry.<String, Long>comparingByValue().reversed())
                .forEach(entry -> System.out.printf("   ‚Ä¢ %s: %d libros%n", 
                    obtenerNombreIdioma(entry.getKey()), entry.getValue()));
        
        // Autor m√°s prol√≠fico
        Optional<Autor> autorMasProl√≠fico = autores.stream()
                .max(Comparator.comparing(a -> a.getLibros().size()));
        
        if (autorMasProl√≠fico.isPresent() && !autorMasProl√≠fico.get().getLibros().isEmpty()) {
            System.out.println();
            System.out.printf("üèÜ Autor m√°s prol√≠fico: %s (%d libros)%n", 
                autorMasProl√≠fico.get().getNombre(),
                autorMasProl√≠fico.get().getLibros().size());
        }
    }
    
    // NUEVAS FUNCIONALIDADES
    private void buscarLibrosPorTema() {
        System.out.print("\nüîç Ingrese el tema que desea buscar (ej: children, fiction, history): ");
        var tema = teclado.nextLine().trim();
        
        if (tema.isEmpty()) {
            System.out.println("‚ùå El tema no puede estar vac√≠o.");
            return;
        }
        
        try {
            System.out.println("üîç Buscando libros sobre: " + tema + "...");
            
            var json = consumoApi.buscarLibrosPorTema(tema);
            var datosBusqueda = consumoApi.convertirDatos(json, ResultadoBusqueda.class);
            
            if (datosBusqueda.libros().isEmpty()) {
                System.out.printf("üòî No se encontraron libros sobre el tema '%s'.%n", tema);
                return;
            }
            
            System.out.printf("%nüìö Libros encontrados sobre '%s' (%d resultados):%n", tema, datosBusqueda.libros().size());
            System.out.println("‚ïê".repeat(60));
            
            // Mostrar los primeros 10 resultados
            datosBusqueda.libros().stream()
                    .limit(10)
                    .forEach(libro -> {
                        System.out.printf("üìñ %s%n", libro.titulo());
                        if (!libro.autores().isEmpty()) {
                            System.out.printf("   üë§ %s%n", libro.autores().get(0).nombre());
                        }
                        System.out.printf("   üì• %,d descargas%n", libro.numeroDescargas());
                        System.out.println("   " + "‚îÄ".repeat(50));
                        
                        // Preguntar si quiere guardar el libro
                        System.out.print("   ¬øDesea agregar este libro a su biblioteca? (s/n): ");
                        String respuesta = teclado.nextLine().trim().toLowerCase();
                        if (respuesta.equals("s") || respuesta.equals("si")) {
                            guardarLibroDesdeAPI(libro);
                        }
                        System.out.println();
                    });
            
        } catch (Exception e) {
            System.out.println("‚ùå Error al buscar libros por tema: " + e.getMessage());
        }
    }
    
    private void explorarLibrosPopulares() {
        try {
            System.out.println("üîç Explorando los libros m√°s populares de Gutendx...");
            
            var json = consumoApi.obtenerLibrosMasPopulares(20);
            var datosBusqueda = consumoApi.convertirDatos(json, ResultadoBusqueda.class);
            
            if (datosBusqueda.libros().isEmpty()) {
                System.out.println("üòî No se pudieron obtener los libros populares.");
                return;
            }
            
            System.out.printf("%nüåü Los libros m√°s populares de Project Gutenberg:%n");
            System.out.println("‚ïê".repeat(60));
            
            datosBusqueda.libros().stream()
                    .limit(15)
                    .forEach(libro -> {
                        System.out.printf("üìñ %s%n", libro.titulo());
                        if (!libro.autores().isEmpty()) {
                            System.out.printf("   üë§ %s%n", libro.autores().get(0).nombre());
                        }
                        System.out.printf("   üåç %s%n", !libro.idiomas().isEmpty() ? 
                            obtenerNombreIdioma(libro.idiomas().get(0)) : "Desconocido");
                        System.out.printf("   üì• %,d descargas%n", libro.numeroDescargas());
                        
                        // Verificar si ya est√° en la biblioteca
                        Optional<Libro> libroExistente = libroRepository.findByTituloContainsIgnoreCase(libro.titulo());
                        if (libroExistente.isPresent()) {
                            System.out.println("   ‚úÖ Ya est√° en tu biblioteca");
                        } else {
                            System.out.print("   ¬øAgregar a tu biblioteca? (s/n): ");
                            String respuesta = teclado.nextLine().trim().toLowerCase();
                            if (respuesta.equals("s") || respuesta.equals("si")) {
                                guardarLibroDesdeAPI(libro);
                            }
                        }
                        System.out.println("   " + "‚îÄ".repeat(50));
                    });
            
        } catch (Exception e) {
            System.out.println("‚ùå Error al obtener libros populares: " + e.getMessage());
        }
    }
    
    private void guardarLibroDesdeAPI(DatosLibro datosLibro) {
        try {
            // Verificar si ya existe
            Optional<Libro> libroExistente = libroRepository.findByTituloContainsIgnoreCase(datosLibro.titulo());
            if (libroExistente.isPresent()) {
                System.out.println("   ‚ö†Ô∏è  El libro ya est√° en tu biblioteca.");
                return;
            }
            
            // Crear/buscar autor
            Autor autor = null;
            if (!datosLibro.autores().isEmpty()) {
                var datosAutor = datosLibro.autores().get(0);
                Optional<Autor> autorExistente = autorRepository.findByNombreContainsIgnoreCase(datosAutor.nombre());
                
                if (autorExistente.isPresent()) {
                    autor = autorExistente.get();
                } else {
                    autor = new Autor(datosAutor.nombre(), 
                            datosAutor.fechaNacimiento(), 
                            datosAutor.fechaMuerte());
                    autor = autorRepository.save(autor);
                }
            }
            
            // Crear libro
            String idioma = datosLibro.idiomas().isEmpty() ? "desconocido" : datosLibro.idiomas().get(0);
            Integer descargas = datosLibro.numeroDescargas() != null ? datosLibro.numeroDescargas() : 0;
            
            Libro libro = new Libro(datosLibro.titulo(), autor, idioma, descargas);
            libroRepository.save(libro);
            
            System.out.println("   ‚úÖ ¬°Libro agregado exitosamente!");
            
        } catch (Exception e) {
            System.out.println("   ‚ùå Error al guardar el libro: " + e.getMessage());
        }
    }
}